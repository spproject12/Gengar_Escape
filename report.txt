Gengar's Escape: Whisper of the forbidden memories

2. Introduction (2–3 lines)
Briefly describe what the game is about and what it does.

Example:
This project is a 2D maze-based puzzle game developed using C++ and SDL2. The player navigates through obstacles, collects items, and avoids enemies to reach the end.

3. Modules Used (Core Features / Functional Components)
List each major module or feature as a bullet or small paragraph. For each, explain its role in the game:

Player Module
Handles movement, collision detection, and animation of the main character.

Enemy Module
Controls enemy behavior and interaction with the player.

UI Module
Manages menus, pop-up windows, buttons, and game overlays (score, lives, etc.).

Trap System
Includes several trap types (trap1, trap2, etc.), each triggering a different event when the player interacts with them.

Main Map & Camera
Renders the main game world using a tile map and enables smooth camera movement based on the player’s position.

Collision System
Checks for interactions with walls, traps, enemies, and collectables.

Collectables & Scoring
Manages items like coins or stars and updates the score accordingly.

Respawn System
Resets player to a checkpoint or start when certain conditions (like trap or enemy collision) are met.

4. Tools & Libraries Used
List the technologies and libraries with a short note on what they were used for:

C++ – Core programming language for game logic.

SDL2 – Used for window management, rendering graphics, and handling events.

SDL2_image – To load PNG/JPG textures for tiles, sprites, etc.

SDL2_mixer (if used) – For playing background music and sound effects.

GIMP / Photoshop – For creating or editing sprites and tiles.

g++ – Compiler used to build the project.

5. Conclusion (2–3 lines)
Mention what this project helped you learn.

Example:
This project helped me understand how modular design and graphics libraries like SDL2 can be used to develop interactive games. I also learned how to structure code in different files and manage event-driven systems.



